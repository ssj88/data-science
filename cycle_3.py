# -*- coding: utf-8 -*-
"""cycle 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FZln2xC-c_GRo2IuvvpwXjc_2t64Kiu0
"""

from sklearn.neighbors import  KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris 

irisData=load_iris()
x=irisData.data
y=irisData.target
X_train,X_train,y_train,y_train=train_test_split(x,y,test_size=0.2,random_state=42)

knn=KNeighborsClassifier(n_neighbors=7)
knn.fit(X_train,y_train)
print("accuracy")
print(knn.score(X_train,y_train))

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics

iris = load_iris()
x = iris.data
y = iris.target
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=1)
c_knn = KNeighborsClassifier(n_neighbors=3)
c_knn.fit(x_train,y_train)
y_pred = c_knn.predict(x_test)
print("Accuracy : ",metrics.accuracy_score(y_test,y_pred))
sample = [[1,1,1,2]]
pred = c_knn.predict(sample)
pred_v = [iris.target_names[p] for p in pred]
print(pred_v)

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

X,y=load_iris(return_X_y=True)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=0)
gnb=GaussianNB()
y_pred=gnb.fit(X_train,y_train).predict(X_test)
print("\n y_pred\n")
x_new=[[5,5,4,4]]
y_new=gnb.fit(X_train,y_train).predict(x_new)

from sklearn.metrics import confusion_matrix  
cm = confusion_matrix(y_test, y_pred)  
print ("CM", cm)
print("\n")
print("predicted output for [[5,5,4,4]]:",y_new)
print("Naive bayes score               :",gnb.score(X_test,y_test))

import matplotlib.pyplot as plt
import numpy as np 
from sklearn import datasets,linear_model
from sklearn.metrics import mean_squared_error,r2_score

df=datasets.load_diabetes()

diabetes_X,diabetes_y=datasets.load_diabetes(return_X_y=True)

diabetes_X=diabetes_X[:,np.newaxis,2]
diabetes_X_train=diabetes_X[:-20]
diabetes_X_test=diabetes_y[-20:]
diabetes_y_train=diabetes_y[:-20]
diabetes_y_test=diabetes_y[-20:]

regr=linear_model.LinearRegression()
regr.fit(diabetes_X_train,diabetes_X_train)
diabetes_y_pred=regr.predict(diabetes_X_test)
            
print("Coefficients: \n ",regr.coef_)
print("mean squared error:%2f" % mean_squared_error(diabetes_y_test,diabetes_y_pred))
print("Coefficient of determination:%2f"%r2_score(diabetes_y_test,diabetes_y_pred))

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.svm import SVC

iris=load_iris()
x=iris.data
y=iris.target
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)
Classifier =SVC(kernel='linear',random_state=0)
Classifier.fit(x_train,y_train)
y_pred=Classifier.predict(x_test)
print("Accuracy:",metrics.accuracy_score(y_test,y_pred))
sample=[[1,1,1,2]]
pred=Classifier.predict(sample)
pred_v=[iris.target_names[p] for p in pred]
print(pred_v)

from sklearn import datasets 
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.cluster import KMeans
iris=datasets.load_iris()
X=iris.data[:,:2]
y=iris.target 
km= KMeans(n_clusters = 3, init='k-means++', n_init=10, max_iter=500, tol=0.0001,verbose=0,random_state=21,copy_x=True,algorithm="auto")
km.fit(X)
centers=km.cluster_centers_
print(centers)
new_labels=km.labels_
print(new_labels)
print(y)